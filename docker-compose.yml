services:
  kafka1:
    image: bitnami/kafka:latest
    networks:
      - kafka-cluster
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - ./v-kafka/kafka1/kafka:/bitnami/kafka
  kafka2:
    image: bitnami/kafka:latest
    networks:
      - kafka-cluster
    ports:
      - '9095:9095'
    environment:
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9092,EXTERNAL://localhost:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - ./v-kafka/kafka2/kafka:/bitnami/kafka
  kafka3:
    image: bitnami/kafka:latest
    networks:
      - kafka-cluster
    ports:
      - '9096:9096'
    environment:
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka3:9092,EXTERNAL://localhost:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - ./v-kafka/kafka3/kafka:/bitnami/kafka

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-cluster
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9092,kafka3:9092

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: passwd
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/pgdata:/var/lib/postgresql/data
    networks:
      - kafka-cluster
    command: >
      postgres
      -c wal_level=logical
      -c max_replication_slots=10
      -c max_wal_senders=10
      -c shared_preload_libraries=pgoutput

  debezium:
    image: debezium/connect:2.1
    depends_on:
      - kafka3
      - kafka2
      - kafka1
      - kafka-ui
      - postgres
    ports:
      - "8083:8083"
    networks:
      - kafka-cluster
    environment:
      - BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9092,kafka3:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_source_connect_statuses
      - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - KEY_CONVERTER_SCHEMAS_ENABLE=false
      - VALUE_CONVERTER_SCHEMAS_ENABLE=false

  spark-init:
    build:
      context: .
      dockerfile: Dockerfile
    networks: [ kafka-cluster ]
    restart: "no"

  db-init:
    image: python:3.9-slim
    networks: [ kafka-cluster ]
    depends_on:
      - postgres
      - spark-init
    volumes:
      - ./write_to_sql.py:/write_to_sql.py
      - ./data1.csv:/data1.csv:ro
      - ./data2.csv:/data2.csv:ro
      - ./data3.csv:/data3.csv:ro
    entrypoint:
      [
        "sh", "-c",
        "pip install pandas sqlalchemy psycopg2-binary && python /write_to_sql.py"
      ]
    restart: "no"

  spark-master:
    image: bitnami/spark:3.5.0
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077"

  spark-worker:
    image: bitnami/spark:3.5.0
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
    ports:
      - "8081:8081"

  spark-submit:
    image: bitnami/spark:3.5.0
    network_mode: "host"
    container_name: spark-submit
    depends_on:
      - spark-master
      - spark-worker
      - minio
      - minio-init
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "4040:4040"
    volumes:
      - ./app:/opt/spark-jobs
    command:
      - "/bin/bash"
      - "-c"
      - |
        sleep 40;
        /opt/bitnami/spark/bin/spark-submit \
        "--packages" "org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0,io.delta:delta-spark_2.12:3.0.0,org.apache.hadoop:hadoop-aws:3.3.4" \
        "--conf=spark.sql.extensions=io.delta.sql.DeltaSparkSessionExtension" \
        "--conf=spark.sql.catalog.spark_catalog=org.apache.spark.sql.delta.catalog.DeltaCatalog" \
        "--conf=spark.hadoop.fs.s3a.access.key=minioadmin" \
        "--conf=spark.hadoop.fs.s3a.secret.key=minioadmin" \
        "--conf=spark.hadoop.fs.s3a.endpoint=http://localhost:9000" \
        "--conf=spark.hadoop.fs.s3a.path.style.access=true" \
        "/opt/spark-jobs/job.py"
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_RPC_ENCRYPTION_ENABLED: "no"
      SPARK_UI_PORT: "4040"
      PIP_PACKAGES: kafka-python
#    restart: unless-stopped
  

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 5;
        mc alias set myminio http://minio:9000 minioadmin minioadmin;
        mc mb -p myminio/spark-data;
      "
    networks:
      - kafka-cluster

  minio:
    image: minio/minio:latest
    hostname: minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - kafka-cluster
networks:
  kafka-cluster:
    driver: bridge

volumes:
  pgdata:
  minio-data:
  spark-ivy-cache: